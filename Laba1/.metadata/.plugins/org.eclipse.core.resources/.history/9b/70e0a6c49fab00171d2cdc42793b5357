package bsuir.library.dao.impl;

import java.util.ArrayList;
import java.util.function.Predicate;

import javax.mail.Address;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;

import bsuir.library.bean.Book;
import bsuir.library.bean.User;
import bsuir.library.dao.DAOAdmin;
import bsuir.library.dao.exception.DAOException;
import bsuir.library.email.EmailSender;
import bsuir.library.serialization.Serialization;

public class DAOAdminImpl extends DAOUserImpl implements DAOAdmin {
	private ArrayList<Book> listOfBook;
	private String fileDBName = "DB_FILE.txt";

	@Override
	public void deleteBook(Book book) throws DAOException {

		listOfBook = Serialization.deserialize( fileDBName);
		Predicate<Book> bookPredicate =b->b.getName().toLowerCase().equals(book.getName().toLowerCase());
		listOfBook.removeIf(bookPredicate);
		Serialization.serialize(listOfBook, fileDBName);
	}

	@Override
	public void changeTypeOfBook(Book book, int typeOfBook) throws DAOException {
		listOfBook = Serialization.deserialize( fileDBName);
		boolean isInList = false;
		for (Book element : listOfBook) {
			if (element.getName().equalsIgnoreCase(book.getName())) {
				element = book;
			}
		}
		if (isInList) {
			throw new DAOException("Такой книги нет!");
		}
		Serialization.serialize(listOfBook, fileDBName);
	}

	
	public void makeANewsletter(Book book) throws DAOException {

		ArrayList<User> listOfUser = Serialization.deserialize(fileDBUser);
		if (listOfUser.isEmpty()) {
			throw new DAOException("There is no book in the library!");
		}
		Address[] adresses = new Address[listOfUser.size()];
		int i = 0;
		for (User user : listOfUser) {
			if (user.getEmail() != null) {
				try {
					adresses[i] = new InternetAddress(user.getEmail());
				} catch (AddressException e) {
					e.printStackTrace();
				}
				i++;
			}
		}

		EmailSender.sendEmail(adresses, book);
	}

	@Override
	public void addDescriptionOfBook(Book book, String description) throws DAOException {
		listOfBook = Serialization.deserialize(fileDBName);
		Book updatedBook=null;
		for (Book element : listOfBook) {
			if (element.getName().equalsIgnoreCase(book.getName()) && element.getType() == book.getType()) {
				element.setdescription(description);
				updatedBook=element;			
			}
		}
		Serialization.serialize(listOfBook, fileDBName);
		if(updatedBook!=null)
		   makeANewsletter(updatedBook);
		else throw new DAOException("Такая книга не найдена");
	}

	@Override
	public void addAdmin(String login, String password, String email) throws DAOException {
		listOfUser = Serialization.deserialize(fileDBUser);

		boolean isInList = false;
		for (User element : listOfUser) {
			if (element.getName().equals(login)) {
				isInList = true;
			}
		}
		if (isInList) {
			throw new DAOException("Такой логин занят!");
		}
		User user = new User();
		user.setName(login);
		user.setEmail(email);
		user.setAccessRights(1);
		int hashOfPassword = (login + password).hashCode();
		user.setPassword(hashOfPassword);
		listOfUser.add(user);
		Serialization.serialize(listOfUser, fileDBUser);
		
	}
}
